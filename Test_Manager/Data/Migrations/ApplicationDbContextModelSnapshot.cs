// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test_Manager.Data;

#nullable disable

namespace Test_Manager.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Test_Manager.Models.BaseQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("testId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("testId");

                    b.ToTable("BaseQuestion");

                    b.HasDiscriminator().HasValue("BaseQuestion");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Test_Manager.Models.BaseReponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<int?>("ResultatTestId")
                        .HasColumnType("int");

                    b.Property<int>("questionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResultatTestId");

                    b.HasIndex("questionId");

                    b.ToTable("BaseReponse");

                    b.HasDiscriminator().HasValue("BaseReponse");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Test_Manager.Models.BaseTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("GestionnaireId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GestionnaireId");

                    b.ToTable("BaseTest");

                    b.HasDiscriminator().HasValue("BaseTest");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Test_Manager.Models.Candidat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseTestId")
                        .HasColumnType("int");

                    b.Property<string>("GestionnaireId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseTestId");

                    b.HasIndex("GestionnaireId");

                    b.ToTable("candidats");
                });

            modelBuilder.Entity("Test_Manager.Models.Entreprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("entreprises");
                });

            modelBuilder.Entity("Test_Manager.Models.ResultatCampagne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("campagneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("campagneId");

                    b.ToTable("resultatCampagnes");
                });

            modelBuilder.Entity("Test_Manager.Models.ResultatTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ResultatCampagneId")
                        .HasColumnType("int");

                    b.Property<int>("candidatId")
                        .HasColumnType("int");

                    b.Property<int>("testId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResultatCampagneId");

                    b.HasIndex("candidatId");

                    b.HasIndex("testId");

                    b.ToTable("resultatTests");
                });

            modelBuilder.Entity("Test_Manager.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Test_Manager.Models.AdministrateurRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("AdministrateurRole");
                });

            modelBuilder.Entity("Test_Manager.Models.GestionnaireRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("GestionnaireRole");
                });

            modelBuilder.Entity("Test_Manager.Models.QuestionCode", b =>
                {
                    b.HasBaseType("Test_Manager.Models.BaseQuestion");

                    b.HasDiscriminator().HasValue("QuestionCode");
                });

            modelBuilder.Entity("Test_Manager.Models.QuestionQCM", b =>
                {
                    b.HasBaseType("Test_Manager.Models.BaseQuestion");

                    b.Property<string>("reponse_correctes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reponse_possibles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("QuestionQCM");
                });

            modelBuilder.Entity("Test_Manager.Models.QuestionRedaction", b =>
                {
                    b.HasBaseType("Test_Manager.Models.BaseQuestion");

                    b.Property<string>("reponse_correcte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("QuestionRedaction");
                });

            modelBuilder.Entity("Test_Manager.Models.ReponseCode", b =>
                {
                    b.HasBaseType("Test_Manager.Models.BaseReponse");

                    b.Property<string>("reponse_candidat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ReponseCode");
                });

            modelBuilder.Entity("Test_Manager.Models.ReponseQCM", b =>
                {
                    b.HasBaseType("Test_Manager.Models.BaseReponse");

                    b.Property<string>("reponse_candidat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseReponse", t =>
                        {
                            t.Property("reponse_candidat")
                                .HasColumnName("ReponseQCM_reponse_candidat");
                        });

                    b.HasDiscriminator().HasValue("ReponseQCM");
                });

            modelBuilder.Entity("Test_Manager.Models.ReponseRedaction", b =>
                {
                    b.HasBaseType("Test_Manager.Models.BaseReponse");

                    b.Property<string>("reponse_candidat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseReponse", t =>
                        {
                            t.Property("reponse_candidat")
                                .HasColumnName("ReponseRedaction_reponse_candidat");
                        });

                    b.HasDiscriminator().HasValue("ReponseRedaction");
                });

            modelBuilder.Entity("Test_Manager.Models.Campagne", b =>
                {
                    b.HasBaseType("Test_Manager.Models.BaseTest");

                    b.HasDiscriminator().HasValue("Campagne");
                });

            modelBuilder.Entity("Test_Manager.Models.Test", b =>
                {
                    b.HasBaseType("Test_Manager.Models.BaseTest");

                    b.Property<int?>("CampagneId")
                        .HasColumnType("int");

                    b.HasIndex("CampagneId");

                    b.HasDiscriminator().HasValue("Test");
                });

            modelBuilder.Entity("Test_Manager.Models.Administrateur", b =>
                {
                    b.HasBaseType("Test_Manager.Models.User");

                    b.HasDiscriminator().HasValue("Administrateur");
                });

            modelBuilder.Entity("Test_Manager.Models.Gestionnaire", b =>
                {
                    b.HasBaseType("Test_Manager.Models.User");

                    b.Property<int>("entrepriseId")
                        .HasColumnType("int");

                    b.HasIndex("entrepriseId");

                    b.HasDiscriminator().HasValue("Gestionnaire");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Test_Manager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Test_Manager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test_Manager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Test_Manager.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Test_Manager.Models.BaseQuestion", b =>
                {
                    b.HasOne("Test_Manager.Models.Test", "test")
                        .WithMany("questions")
                        .HasForeignKey("testId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("test");
                });

            modelBuilder.Entity("Test_Manager.Models.BaseReponse", b =>
                {
                    b.HasOne("Test_Manager.Models.ResultatTest", null)
                        .WithMany("reponses")
                        .HasForeignKey("ResultatTestId");

                    b.HasOne("Test_Manager.Models.BaseQuestion", "question")
                        .WithMany()
                        .HasForeignKey("questionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("question");
                });

            modelBuilder.Entity("Test_Manager.Models.BaseTest", b =>
                {
                    b.HasOne("Test_Manager.Models.Gestionnaire", null)
                        .WithMany("tests")
                        .HasForeignKey("GestionnaireId");
                });

            modelBuilder.Entity("Test_Manager.Models.Candidat", b =>
                {
                    b.HasOne("Test_Manager.Models.BaseTest", null)
                        .WithMany("candidats")
                        .HasForeignKey("BaseTestId");

                    b.HasOne("Test_Manager.Models.Gestionnaire", null)
                        .WithMany("candidats")
                        .HasForeignKey("GestionnaireId");
                });

            modelBuilder.Entity("Test_Manager.Models.ResultatCampagne", b =>
                {
                    b.HasOne("Test_Manager.Models.Campagne", "campagne")
                        .WithMany()
                        .HasForeignKey("campagneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("campagne");
                });

            modelBuilder.Entity("Test_Manager.Models.ResultatTest", b =>
                {
                    b.HasOne("Test_Manager.Models.ResultatCampagne", null)
                        .WithMany("resultatTests")
                        .HasForeignKey("ResultatCampagneId");

                    b.HasOne("Test_Manager.Models.Candidat", "candidat")
                        .WithMany()
                        .HasForeignKey("candidatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Test_Manager.Models.Test", "test")
                        .WithMany()
                        .HasForeignKey("testId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("candidat");

                    b.Navigation("test");
                });

            modelBuilder.Entity("Test_Manager.Models.Test", b =>
                {
                    b.HasOne("Test_Manager.Models.Campagne", null)
                        .WithMany("tests")
                        .HasForeignKey("CampagneId");
                });

            modelBuilder.Entity("Test_Manager.Models.Gestionnaire", b =>
                {
                    b.HasOne("Test_Manager.Models.Entreprise", "entreprise")
                        .WithMany()
                        .HasForeignKey("entrepriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("entreprise");
                });

            modelBuilder.Entity("Test_Manager.Models.BaseTest", b =>
                {
                    b.Navigation("candidats");
                });

            modelBuilder.Entity("Test_Manager.Models.ResultatCampagne", b =>
                {
                    b.Navigation("resultatTests");
                });

            modelBuilder.Entity("Test_Manager.Models.ResultatTest", b =>
                {
                    b.Navigation("reponses");
                });

            modelBuilder.Entity("Test_Manager.Models.Campagne", b =>
                {
                    b.Navigation("tests");
                });

            modelBuilder.Entity("Test_Manager.Models.Test", b =>
                {
                    b.Navigation("questions");
                });

            modelBuilder.Entity("Test_Manager.Models.Gestionnaire", b =>
                {
                    b.Navigation("candidats");

                    b.Navigation("tests");
                });
#pragma warning restore 612, 618
        }
    }
}
